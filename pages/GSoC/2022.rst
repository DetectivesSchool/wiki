.. title: 2022

Ideas for Google Summer of Code 2022
====================================

The following are the proposed projects for inclusion into Google Summer of Code 2022.
Some ideas are tentative, please engage with the community strongly to present and improve your original proposals.

PyZombis
--------

.. image:: https://raw.githubusercontent.com/PyAr/PyZombis/main/_sources/lectures/img/TWP_small.png
   :align: left

A Community course, completely online and interactive, to teach Python to everyone! http://pyar.github.io/PyZombis

The original Brazilian MOOC `"Python for Zumbies" <https://www.slideshare.net/fmasanori/python-for-zombies-first-brazilian-programming-mooc>`_ created by Fernando Masanori has +800k views on `Youtube <https://www.youtube.com/playlist?list=PLUukMN0DTKCtbzhbYe2jdF4cr8MOWClXc>`_  and has taught over 70K students basic Python.

All lectures and exercises are done fully online (via client-side Python on top of Javascript using `Brython <https://brython.info/>`_).
There is no need for the student to install python on their computer or to run their own server.

Expected outcomes:
  | Some lectures still need further work to be ported to the web, so they can run interactively in the browser (databases, games) using native JS libraries.  `Playwright <https://playwright.dev/>`_ end-2-end automated web tests are mandatory.
  | Refactors to the upstream educative platform (Runestone) should be continued and extended, for further information see `PR#1208 <https://github.com/RunestoneInteractive/RunestoneComponents/pull/1208>`_ (a new component: interactive python interpreter for advanced exercises) 

- Project information:
    - `Repository <https://github.com/PyAr/PyZombis>`__ (source code, wiki and continous integration with tests)
    - `Good first issues <https://github.com/PyAr/PyZombis/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22>`__
    - `PyCon Argentina 2021 video tutorial <https://www.youtube.com/watch?v=BalC7Bp5AFQ>`_ (YouTube)
    - `Academic info <http://bit.ly/pyzombis>`_ (full proposal, course syllabus, pedagogical methodology)

- Project ideas: 
    - Interactive `SQL python lectures <http://pyar.github.io/PyZombis/master/lectures/TWP42/TWP42_1.html>`__ using javascript (SQLite.js): full details in `#193 <https://github.com/PyAr/PyZombis/issues/193>`__ (also improve & extend exercises with automatic grading / unit tests)
    - Interactive `PyGame lectures <http://pyar.github.io/PyZombis/master/lectures/TWP60/TWP60_2.html>`__ using javascript "wrapper" like `gamejs <http://gamejs.org/showcase.html#pygame-vs-gamejs>`__ (tip: see Brython demos: `bricks <https://www.brython.info/gallery/bricks_py.html>`_ & `3D walker <https://www.brython.info/gallery/3Dwalker.html>`_, a zombie educative game would be great!)

- Project Length: 175 hr each; prefer a full 350 hr proposal including both ideas + UI/UX functional revamp and extensive testing

- Difficulty level: Intermediate (minimal Python and Web programming experience expected, some gaming + HTML5 design background recommended)

- Technologies involved: Python (sphinx, runestone, pytest-playwrigth), Javascript

- Potential mentors: `@reingart <https://github.com/reingart>`_ (coordinator) + `@NicolasSandoval <https://github.com/NicolasSandoval>`_ et al., please contact all mentors in `PyAr GSoC Telegram group <https://t.me/+ljnpIYBUMLI3MDAx>`__

- Past GSoC Students projects wrap-up (for reference):
    - `Angela Remolina <https://github.com/PyAr/PyZombis/wiki/GSOC-2021-PSF-PyAr-Final-code-submission-PyZombis-Angela-Remolina>`_ (2021)
    - `Leonardo Cumplido <https://github.com/PyAr/PyZombis/wiki/Leonardo-Cumplido-GSoC-2021-Wrap-Up>`_ (2021)
    - `Ybrahin Martinez <https://github.com/PyAr/PyZombis/wiki/GSoC-2021-Final-Code-Ybrahin-Martinez>`_ (2021)

PyEmpaq
-------

.. image:: https://raw.githubusercontent.com/facundobatista/pyempaq/main/resources/logo-256.png
   :align: left

PyEmpaq is a simple but powerful Python packer to run any project with any virtualenv dependencies anywhere.
You can convert any Python project into a single .pyz file with all the project's content packed inside. 
It will run ok in Linux, Windows, Mac, or whatever.
The only requirement is Python to be already installed.

Expected outcomes:
  | Both the packaging and execution improvements should be fully multiplatform (see GitHub Actions CI infrastructure). 
  | Contributions should have proper documentation and testing coverage (unit and integration)

- Project information:
    - `Documentation <https://pyempaq.readthedocs.io/en/latest/>`__
    - `Repository <https://github.com/facundobatista/pyempaq/>`__
    - `Good first issues <https://github.com/facundobatista/pyempaq/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22>`__

- Project ideas: 
    - Milestone `Control on packed content <https://github.com/facundobatista/pyempaq/milestone/3>`__ : Specify exactly what to include in the project's config
    - Milestone `Testing <https://github.com/facundobatista/pyempaq/milestone/5>`__: Implement logged_exec in unpacker, instead of subprocess.run 
    - Milestone `Stabilization <https://github.com/facundobatista/pyempaq/milestone/6>`__: GUI; Windows GitHub Actions; Ubuntu (Snap); support setup.py / setup.cfg & pyproject.toml
    
- Project Length: 175 hr to 350 hr (preferred, comprising several ideas)

- Difficulty level: Easy to Intermediate (some ideas possibly doable by an advanced beginner with some python experience)

- Technologies involved: Python Packaging, Virtual environments, pytest

- Potential mentors: `@facundobatista <https://github.com/facundobatista>`_ (coordinator) + `@eamanu <https://github.com/eamanu>`_ et al., please contact all mentors in `PyAr GSoC Telegram group <https://t.me/+ljnpIYBUMLI3MDAx>`__

OpenLex
-------

Legal Case Management Software for Attorneys and Small Law Firms

OpenLEX was developed as part of an Open Source Specialization Program, to provide free legal software for lawyers and small law firms (in a market with no Open Source alternative for the Continental Law System and local regulations)

Expected outcomes:
  OpenLex is a project to facilitate the work of lawyers and small law firms.
  It would be great if the app could be usable from mobile phones and tablets (i.e. from Tribunals, Courts, etc.)
  The project should be easy to install, even for non-technical users (lawyers), its main intended audience.

- Project information:
    - `Repository <https://github.com/PyAr/OpenLex/>`__
    - `Good first issues & Ideas <https://github.com/PyAr/OpenLex/issues>`__

- Project ideas: 
    - Classic Desktop app `#20 <https://github.com/PyAr/OpenLex/issues/15>`__ & Responsive for mobile `#14 <https://github.com/PyAr/OpenLex/issues/14>`__
    - Installers for Windows `#13 <https://github.com/PyAr/OpenLex/issues/13>`__, Linux `#15 <https://github.com/PyAr/OpenLex/issues/15>`__ & MacOS `#16 <https://github.com/PyAr/OpenLex/issues/16>`__ 
    - Invoice and email integration `#12 <https://github.com/PyAr/OpenLex/issues/12>`__ 

- Project Length: 175 hr (medium) per idea/ticket; for a 350 hr project you might want to plan to go beyond and combine/extend ideas, to see if you can improve our current code.

- Difficulty level: Easy (minimal web programming experience, legal knowledge is a plus)

- Technologies involved: Python (web2py, pytest-playwright), HTML5, JavaScript, mobile (Android/IOS, optional)

- Potential mentors: `@marian-vignau <https://github.com/marian-vignau>`_ (coordinator) + `@eamanu <https://github.com/eamanu>`_ et al., please contact all mentors in `PyAr GSoC Telegram group <https://t.me/+ljnpIYBUMLI3MDAx>`__)

- Past GSoC Students projects wrap-up (for reference):
    - `Juan Rodriguez <https://github.com/PyAr/OpenLex/wiki/Pyar-Openlex-GSoC-2021-Final-Summary-Rodriguez-Juan>`_ (2021)

PyAfipWs
--------

Electronic Invoice, Agriculture, Foreign Trade, Taxes, Pharmaceutical, etc.

Library for Developers (integrators and legacy languages interfaces) Tools for Accountants and SMEs (Odoo/OpenERP modules and Tryton Argentina's localization)

PyAFIPWs is a widespread standard reference implementation to communicate with Argentinaâ€™s government entities, with more than +1.5K users group subscriptions, many bindings to other languages, and used in modules for Open Source ERP localizations (OpenERP, Odoo, Tryton, etc.)

The project has more than 10 years of development and many accumulated features, covering several webservices and tools.
Initial work has been completed to migrate and modernize the project, but there are many rough edges and enhancements opportunities.

Expected outcomes:
  As it's multi-platform, used by a wide user base of developers (specially from other programming languages), special care must be taken to improve the code-base with  backward compatibility.

  Exhaustive Test coverage is a must to complete the transition.
  Also, installers for Windows users should be migrated and upgraded to support legacy applications (main use case).
  Finally, a webservice simulator could be helpful to ease integration testing and speed-up new developments.

- Project information:
    - `Documentation <https://github.com/reingart/pyafipws/wiki/WSFEv1>`__
    - `Repository <https://github.com/PyAr/pyafipws/>`__
    - `Good first issues <https://github.com/PyAr/pyafipws/issues>`__

- Project Ideas: 
    - Unit Testing: extend unit tests coverage to 70% (including command-line tools, see pending `Pull Requests <https://github.com/reingart/pyafipws/wiki/InstalacionCodigoFuente#generaci%C3%B3n-de-instalador>`__ and report.html in wokrflow)
    - Automation: build windows installers in continuous integration (see  `Wiki: Install <https://github.com/reingart/pyafipws/wiki/InstalacionCodigoFuente#generaci%C3%B3n-de-instalador>`__ to automate)
    - Webservice simulator: fake implementation for testing, mimicking government servers (WSDL SOAP based, see `server.py <https://github.com/pysimplesoap/pysimplesoap/blob/master/pysimplesoap/server.py#L539>`__ for an example, and `web2py-app <https://github.com/SistemasAgiles/pyafipws.web2py-app>`_ for a Proof of Concept)

- Project Length: 350 hr (large)

- Difficulty level: Intermediate (basic knowledge in operating systems, network protocols, APIs & testing; Accounting / ERP experience recommended)

- Technologies involved: Python (httplib, xml, webservices, pdf, pytest), Linux/Windows

- Potential mentors: `@reingart <https://github.com/reingart>`_ (coordinator) + `@NicolasSandoval <https://github.com/NicolasSandoval>`_, please contact all mentors in `PyAr GSoC Telegram group <https://t.me/+ljnpIYBUMLI3MDAx>`__

- Past GSoC Students projects wrap-up (for reference):
    - `Utkarsh Kumar <https://github.com/PyAr/pyafipws/wiki/GSoC-2021:-Final-Summary>`_ (2021)
    - `Nico Sandoval <https://github.com/PyAr/pyafipws/wiki/PyAr-PSF-GSoC-2019-Final-Summary>`_ (2019)

About Python Argentina
======================

We are looking for new Pythonistas!

Help us to foster the development of several open-source community projects. Many are fun and innovative, others are challenging and resolve real-world requirements.

The association was founded aiming to help the Python devs, increase their diversity and outreach, especially overcoming minorities and cultural barriers (mainly socioeconomic, language, gender), serving as an umbrella organization to some ongoing efforts.

Spanish is one of the most spoken languages in the world, and many of our developed tools and libraries are aimed to fill the missing open-source gap.
They can help to learn and further work with Python, either to enthusiasts, professional programmers, or even final users!

Experienced developers, teachers, and volunteers will assist you, guiding you throughout the process with well-defined goals (according to skills and tech background)

Contacting Us
-------------

We're in the Argentina time zone (GMT-3)

* Telegram: https://t.me/+ljnpIYBUMLI3MDAx
* Forum: https://pyar.discourse.group/
* Email: secretaria+gsoc@ac.python.org.ar

NOTE: Spanish is a requisite for many projects, as it is the language used for documentation and community communications. 
On the other side, if you do not speak English fluently, we can help you with translations and guidance (in Spanish, of course).

NOTA: Si hablÃ¡s EspaÃ±ol pero te cuesta el InglÃ©s, te podemos ayudar con las traducciones y redacciones para que puedas participar! No te preocupes, el dÃ­a a dÃ­a y documentaciÃ³n en general estÃ¡n en Castellano.

VisitÃ¡ nuestra GSoC Wiki en EspaÃ±ol para mÃ¡s informaciÃ³n: https://wiki.python.org.ar/gsoc/

We want our community to be more diverse: whoever you are, and whatever your background, we welcome you.

Queremos que nuestra comunidad sea mÃ¡s diversa: quienquiera que seas, sea cual sea tu origen, te damos la bienvenida

Getting Started
===============

If you want to participate as a contributor, please follow the next guidelines:

Presenting yourself
-------------------

Write to the Telegram group about you. State clearly:

* Why you want to participate in GSoC, shortly comment your background and expectations
* What project would you prefer: look at this page for ideas
* What is your previous experience, Python skills, Django, hg/git, js, etc.

Fixing a bug!
-------------

* Ask for a simple ticket. For example, take a look at CDPedia, PyAfipWs, OpenLex, PyZombis.
* Create a user in GitHub (if you don't have one)
* Fork the project repository and try to fix an issue of your desired project
* Discuss with potential mentors your fix, creating a Pull Request as early as possible!

Writing a Proposal
------------------

* Select a project idea and write a detailed proposal using Google Docs (in advance!)
* Define 3 milestones & deliverables (i.e. Proof-Of-Concept, Prototype, Final Demo)
* Tasking out (high-level goals for each milestone)
* Describe the acceptance criteria ("Minimum Viable Product" of each phase)

Share an early draft (based on the Application Template, using Google Docs) and discuss your approach in the group with mentors
Do not forget to submit your application to the Google system when ready, before the deadline

IMPORTANT:
----------

Late, incomplete, or low-quality proposals will not be considered at all. 
Mentor's time and available students slots are limited, so please ask intelligently for advice and feedback early.

Last-minute applications are generally a signal of further problems (for you and for us too, please avoid!).
Proposals without any previous contribution in the repository (i.e. bug-fix issue) will be rejected.

You're expected to have an almost full-time dedication to the GSoC, so plan accordingly and disclose any potential commitment (exams, work, vacations, travels, etc.)
